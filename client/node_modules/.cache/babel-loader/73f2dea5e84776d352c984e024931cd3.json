{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/Capstone/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/Capstone/client/src/components/EditTodo.tsx\";\nimport * as React from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { getUploadUrl, uploadFile, processFile } from '../api/todos-api';\nvar UploadState;\n\n(function (UploadState) {\n  UploadState[UploadState[\"NoUpload\"] = 0] = \"NoUpload\";\n  UploadState[UploadState[\"FetchingPresignedUrl\"] = 1] = \"FetchingPresignedUrl\";\n  UploadState[UploadState[\"UploadingFile\"] = 2] = \"UploadingFile\";\n})(UploadState || (UploadState = {}));\n\nexport var EditTodo =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EditTodo, _React$PureComponent);\n\n  function EditTodo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditTodo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditTodo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      file: undefined,\n      uploadState: UploadState.NoUpload\n    };\n\n    _this.handleFileChange = function (event) {\n      var files = event.target.files;\n      if (!files) return;\n\n      _this.setState({\n        file: files[0]\n      });\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var uploadUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                _context.prev = 1;\n\n                if (_this.state.file) {\n                  _context.next = 5;\n                  break;\n                }\n\n                alert('File should be selected');\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _this.setUploadState(UploadState.FetchingPresignedUrl);\n\n                _context.next = 8;\n                return getUploadUrl(_this.props.auth.getIdToken(), _this.props.match.params.todoId);\n\n              case 8:\n                uploadUrl = _context.sent;\n\n                _this.setUploadState(UploadState.UploadingFile);\n\n                _context.next = 12;\n                return uploadFile(uploadUrl, _this.state.file);\n\n              case 12:\n                _context.next = 14;\n                return processFile(_this.props.auth.getIdToken(), _this.props.match.params.todoId);\n\n              case 14:\n                alert('File was uploaded!');\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n                alert('Could not upload a file: ' + _context.t0.message);\n\n              case 20:\n                _context.prev = 20;\n\n                _this.setUploadState(UploadState.NoUpload);\n\n                return _context.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 17, 20, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(EditTodo, [{\n    key: \"setUploadState\",\n    value: function setUploadState(uploadState) {\n      this.setState({\n        uploadState: uploadState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 7\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }\n        }, \"Upload new image\"),\n        /*#__PURE__*/\n        React.createElement(Form, {\n          onSubmit: this.handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 9\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Form.Field, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }\n        }, \"File\"),\n        /*#__PURE__*/\n        React.createElement(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          placeholder: \"Image to upload\",\n          onChange: this.handleFileChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }\n        })), this.renderButton()))\n      );\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 7\n          }\n        }, this.state.uploadState === UploadState.FetchingPresignedUrl &&\n        /*#__PURE__*/\n        React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 73\n          }\n        }, \"Uploading image metadata\"), this.state.uploadState === UploadState.UploadingFile &&\n        /*#__PURE__*/\n        React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 66\n          }\n        }, \"Uploading file\"),\n        /*#__PURE__*/\n        React.createElement(Button, {\n          loading: this.state.uploadState !== UploadState.NoUpload,\n          type: \"submit\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }\n        }, \"Upload\"))\n      );\n    }\n  }]);\n\n  return EditTodo;\n}(React.PureComponent);","map":{"version":3,"sources":["/home/ubuntu/Capstone/client/src/components/EditTodo.tsx"],"names":["React","Form","Button","getUploadUrl","uploadFile","processFile","UploadState","EditTodo","state","file","undefined","uploadState","NoUpload","handleFileChange","event","files","target","setState","handleSubmit","preventDefault","alert","setUploadState","FetchingPresignedUrl","props","auth","getIdToken","match","params","todoId","uploadUrl","UploadingFile","message","renderButton","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Form, Button } from 'semantic-ui-react'\nimport Auth from '../auth/Auth'\nimport { getUploadUrl, uploadFile, processFile } from '../api/todos-api'\n\nenum UploadState {\n  NoUpload,\n  FetchingPresignedUrl,\n  UploadingFile,\n}\n\ninterface EditTodoProps {\n  match: {\n    params: {\n      todoId: string\n    }\n  }\n  auth: Auth\n}\n\ninterface EditTodoState {\n  file: any\n  uploadState: UploadState\n}\n\nexport class EditTodo extends React.PureComponent<\n  EditTodoProps,\n  EditTodoState\n> {\n  state: EditTodoState = {\n    file: undefined,\n    uploadState: UploadState.NoUpload\n  }\n\n  handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files\n    if (!files) return\n\n    this.setState({\n      file: files[0]\n    })\n  }\n\n  handleSubmit = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    try {\n      if (!this.state.file) {\n        alert('File should be selected')\n        return\n      }\n\n      this.setUploadState(UploadState.FetchingPresignedUrl)\n      const uploadUrl = await getUploadUrl(this.props.auth.getIdToken(), this.props.match.params.todoId)\n\n      this.setUploadState(UploadState.UploadingFile)\n      await uploadFile(uploadUrl, this.state.file)\n\n      //Alan Added for Resizing Images\n      await processFile(this.props.auth.getIdToken(), this.props.match.params.todoId)\n\n      alert('File was uploaded!')\n    } catch (e) {\n      alert('Could not upload a file: ' + e.message)\n    } finally {\n      this.setUploadState(UploadState.NoUpload)\n    }\n  }\n\n  setUploadState(uploadState: UploadState) {\n    this.setState({\n      uploadState\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Upload new image</h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Field>\n            <label>File</label>\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              placeholder=\"Image to upload\"\n              onChange={this.handleFileChange}\n            />\n          </Form.Field>\n\n          {this.renderButton()}\n        </Form>\n      </div>\n    )\n  }\n\n  renderButton() {\n\n    return (\n      <div>\n        {this.state.uploadState === UploadState.FetchingPresignedUrl && <p>Uploading image metadata</p>}\n        {this.state.uploadState === UploadState.UploadingFile && <p>Uploading file</p>}\n        <Button\n          loading={this.state.uploadState !== UploadState.NoUpload}\n          type=\"submit\"\n        >\n          Upload\n        </Button>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}